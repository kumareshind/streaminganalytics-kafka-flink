version: '3'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  db:
    driver: bridge

services:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - zookeeper0
      - zookeeper1
      - kafka0
      - kafka1
      - schemaregistry0
      - kafka-connect0
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper0:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schemaregistry0:8085
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083
      KAFKA_CLUSTERS_1_NAME: secondLocal
      KAFKA_CLUSTERS_1_BOOTSTRAPSERVERS: kafka1:29092
      KAFKA_CLUSTERS_1_ZOOKEEPER: zookeeper1:2181
      KAFKA_CLUSTERS_1_JMXPORT: 9998
      KAFKA_CLUSTERS_1_SCHEMAREGISTRY: http://schemaregistry1:8085
      KAFKA_CLUSTERS_1_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_1_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083
    networks:
      - frontend
      - backend

  zookeeper0:
    image: confluentinc/cp-zookeeper:5.2.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - backend

  kafka0:
    image: confluentinc/cp-kafka:5.3.1
    depends_on:
      - zookeeper0
    ports:
      - 9092:9092
      - 9997:9997
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper0:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_LOG_RETENTION_MINUTES: 6
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 360000
      JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
    networks:
      - backend

  zookeeper1:
    image: confluentinc/cp-zookeeper:5.2.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka1:
    image: confluentinc/cp-kafka:5.3.1
    depends_on:
      - zookeeper1
    ports:
      - 9093:9093
      - 9998:9998
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_MINUTES: 6
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 360000
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms256M"
      JMX_PORT: 9998
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1 -Dcom.sun.management.jmxremote.rmi.port=9998
    networks:
      - backend

  schemaregistry0:
    image: confluentinc/cp-schema-registry:5.5.0
    ports:
      - 8085:8085
    depends_on:
      - zookeeper0
      - kafka0
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka0:29092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper0:2181
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry0
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry0:8085
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
    networks:
      - backend

  schemaregistry1:
    image: confluentinc/cp-schema-registry:5.5.0
    ports:
      - 18085:8085
    depends_on:
      - zookeeper1
      - kafka1
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:29092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper1:2181
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schemaregistry1
      SCHEMA_REGISTRY_LISTENERS: http://schemaregistry1:8085
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
    networks:
      - backend

  kafka-connect0:
    image: confluentinc/cp-kafka-connect:6.0.1
    ports:
      - 8083:8083
    depends_on:
      - kafka0
      - schemaregistry0
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka0:29092
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry0:8085
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schemaregistry0:8085
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect0
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks:
      - backend

  kafka-init-topics:
    image: confluentinc/cp-kafka:5.3.1
    volumes:
       - ./message.json:/data/message.json
    depends_on:
      - kafka1
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
               cub kafka-ready -b kafka1:29092 1 30 && \
               kafka-topics --create --topic second.users --partitions 3 --replication-factor 1 --if-not-exists --zookeeper zookeeper1:2181 && \
               kafka-topics --create --topic second.messages --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper1:2181 && \
               kafka-topics --create --topic first.messages --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper0:2181 && \
               kafka-topics --create --topic transactions-data --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper0:2181 && \
               kafka-topics --create --topic transactions-data-result --partitions 2 --replication-factor 1 --if-not-exists --zookeeper zookeeper0:2181 && \
               kafka-console-producer --broker-list kafka1:29092 -topic second.users < /data/message.json'"
    networks:
      - backend

  kafka-producer:
    build: ./kafka-producer-image/
    image: hexergogo/python
    depends_on:
      - kafka0
    environment:
      EXAMPLE_GOAL: "producer"
      EXAMPLE_KAFKA_TOPIC: "transactions-data"
      EXAMPLE_KAFKA_SERVER: "kafka0:29092"
      EXAMPLE_ZOOKEEPER_SERVER: "zookeeper1:2181"
      EXAMPLE_PRODUCER_INTERVAL: 100
    networks:
      - backend

  postgres:
    build: ./postgres-image
    image: postgres/postgres:11-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    expose:
      - "5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ${PWD}/postgres-image:/docker-entrypoint-initdb.d
    networks:
      - backend
      - db

  jobmanager:
    build: .
    image: pyflink/pyflink:1.11.2-scala_2.11
    container_name: jobmanager
    volumes:
      - .:/opt/pyflink-nlp
      - ./pipelines/:/opt/pyflink/pipelines
    hostname: "jobmanager"
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - backend
      - db

  taskmanager:
    image: pyflink/pyflink:1.11.2-scala_2.11
    container_name: taskmanager
    volumes:
    - .:/opt/pyflink-nlp
    - ./pipelines/:/opt/pyflink/pipelines
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - jobmanager:jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    networks:
      - backend
      - db

  jobmanager-nlp:
    build: ./flink-nlp-image/
    image: pyflink/pyflink:1.10.0-scala_2.11
    container_name: jobmanager-nlp
    volumes:
      - .:/opt/pyflink-nlp
      - ./pipelines/:/opt/pyflink/pipelines
    hostname: "jobmanager-nlp"
    expose:
      - "6123"
    ports:
      - "8082:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager-nlp
    networks:
      - backend
      - db

  taskmanager-nlp:
    image: pyflink/pyflink:1.10.0-scala_2.11
    container_name: taskmanager-nlp
    volumes:
    - .:/opt/pyflink-nlp
    - ./pipelines/:/opt/pyflink/pipelines
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager-nlp
    command: taskmanager
    links:
      - jobmanager-nlp:jobmanager-nlp
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager-nlp
    networks:
      - backend
      - db

  superset:
    build: ./superset-image/
    image: superset/superset:1.5.1
    container_name: superset
    volumes:
      - ./superset-image/db-postgres.yaml:/db-postgres.yaml
      - ./superset-image/dashboard-flink-user.json:/dashboard-flink-user.json
    ports:
      - "8088:8088"
    depends_on:
      - postgres
    networks:
      - frontend
      - db
